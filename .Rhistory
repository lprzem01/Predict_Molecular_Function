merged <- rbind(merged, regulator.data)
merged <- rbind(merged, transporter.data)
merged <- rbind(merged, structural.data)
# Perform left join using dplyr
filtered.df <- left_join(df, merged, by = 'Entry')
#check files merged correctly
summary(filtered.df)
# Save filtered fasta
write.fasta(as.list(filtered.df$seq.text), filtered.df$Entry, "Output/filtered.fasta", as.string = FALSE)
# Load final fasta
filtered.fasta <- readFASTA("Output/filtered.fasta")
filtered.fasta[1:5]
#remove any sequences with non standard amino acids
filtered.fasta <- filtered.fasta[(sapply(filtered.fasta, protcheck))]
# Calculate APseAAC descriptors
composition <- t(sapply(filtered.fasta, function(seq) extractAPAAC(seq, lambda = 1)))
#change composition to a dataframe
composition <- data.frame(composition)
#include Entry as a column
composition <- read_tsv("Output/Composition.tsv")
#check file imported correctly
colnames(composition)
composition <- read_tsv("Output/Composition.tsv")
#check file imported correctly
colnames(composition)
# Merge base dataframe with FASTA data by Entry
df <- left_join(df, composition, by = 'Entry')
colnames(df)
# Remove columns not used in classification
df <- subset(df, select = -c(Entry, Organism.ID, Organism, Molecular_function))
summary(df)
# Save final merged data file
write_tsv(df, "Output/final_df.tsv")
df <- read_tsv("Output/final_df.tsv")
#change oGO to factor for clasification
df$GO <- as.factor(df$GO)
#check for NAs n the final dataset
sapply(df, function(x) sum(is.na(x)))
#remove NAs
df<- drop_na(df)
#check Nas have been handles
sapply(df, function(x) sum(is.na(x)))
#Plot a tree to see the variables which largerly contribute to clasification
tree <- tree(GO ~ ., df)
plot(tree, type="uniform")
text(tree)
#select random sample of 1000 rows from data frame
set.seed(123)
df.sample <- df[sample(nrow(df), size=10000), ]
# Define the training control and train the Random Forest model
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
rfModel <- train(GO ~ ., data = df.sample, method = "rf", trControl = trainControl)
knitr::opts_chunk$set(echo = TRUE)
#list all packages used
packages = c("tidyr", "readr", "phylotools", "dplyr", "ggplot2", "Biostrings", "protr", "stringr", "randomForest", "tree", "ggrepel", "tidyverse", "e1071", "neuralnet", "shiny", "bslib", "dplyr", "ggplot2", "ggExtra", "seqinr", "caret")
## oad or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
View(transporter)
tinytex::install_tinytex()
unlink("Coursework2_Final_draft_cache", recursive = TRUE)
knit_with_parameters("C:/Users/User/OneDrive - Birkbeck, University of London/UNI/stats/Coursework 2/Coursework2_final_draft/Coursework2_Final_draft.Rmd")
knitr::opts_chunk$set(echo = TRUE)
#list all packages used
packages = c("tidyr", "readr", "phylotools", "dplyr", "ggplot2", "Biostrings", "protr", "stringr", "randomForest", "tree", "ggrepel", "tidyverse", "e1071", "neuralnet", "shiny", "bslib", "dplyr", "ggplot2", "ggExtra", "seqinr", "caret")
## oad or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
#load data (dataframes)
catalyst.df <- read_tsv("Data/GO0003824.tsv")
binding.df <- read_tsv("Data/GO0005488.tsv")
electron.df <- read_tsv("Data/GO0009055.tsv")
regulator.df <- read_tsv("Data/GO0098772.tsv")
transporter.df <- read_tsv("Data/GO0005215.tsv")
structural.df <- read_tsv("Data/GO0005198.tsv")
# Load FASTA files using phylotools package
catalyst.fasta <- phylotools::read.fasta("Data/GO0003824.fasta")
binding.fasta <-  phylotools::read.fasta("Data/GO0005488.fasta")
electron.fasta <-  phylotools::read.fasta("Data/GO0009055.fasta")
regulator.fasta <-  phylotools::read.fasta("Data/GO0098772.fasta")
transporter.fasta <- phylotools::read.fasta("Data/GO0005215.fasta")
structural.fasta <- phylotools::read.fasta("Data/GO0005198.fasta")
#inspect loaded data data
summary(c(binding.df,catalyst.df, electron.df,regulator.df,transporter.df,structural.df))
#Add a column for GOID and GO descriptor to each df
binding.df$GO <- "Binding"
catalyst.df$GO <- "Catalytic activity"
electron.df$GO <- "Electron Transfer"
regulator.df$GO <- "Molecular Function Regulator"
transporter.df$GO <- "Transporter Activity"
structural.df$GO <- "Structural Molecule"
#filter out duplicates in the databases
catalyst.filtered <- catalyst.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
binding.filtered <-binding.df %>%
filter(!Entry %in% catalyst.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
electron.filtered <- electron.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
regulator.filtered <- regulator.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
structural.filtered <- structural.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% catalyst.df$Entry)
transporter.filtered <- transporter.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% structural.df$Entry)
#combine all databases
df <- rbind(catalyst.filtered,binding.filtered,electron.filtered,regulator.filtered,structural.filtered,transporter.filtered)
#modify colnames for ease
colnames(df) <- c("Entry", "Organism.ID", "Organism", "Length", "Molecular_function", "GO" )
#check for missing values
sapply(df, function(x) sum(is.na(x)))
# inspect modified data
summary(df)
#intermediate file saved
write_tsv(df, "Output/output_file1.tsv")
#load saved file
df <- read_tsv("Output/output_file1.tsv")
names.fasta <- c(catalyst.fasta, binding.fasta, electron.fasta, regulator.fasta,transporter.fasta,structural.fasta)
summary(names.fasta)
# Isolate Entry ID from rownames
catalyst <- strsplit(as.character(catalyst.fasta$seq.name), "|", fixed = T)
binding <- strsplit(as.character(binding.fasta$seq.name), "|", fixed = T)
electron <- strsplit(as.character(electron.fasta$seq.name), "|", fixed = T)
regulator <- strsplit(as.character(regulator.fasta$seq.name), "|", fixed = T)
structural <- strsplit(as.character(structural.fasta$seq.name), "|", fixed = T)
transporter <- strsplit(as.character(transporter.fasta$seq.name), "|", fixed = T)
names <- c(catalyst,binding,electron, regulator, structural,transporter)
head(names)
# Create a data frame with Entry ID as a column
binding.data <- data.frame(
Entry = sapply(binding, function(binding) binding[2]),
seq.text = binding.fasta$seq.text
)
catalyst.data <- data.frame(
Entry = sapply(catalyst, function(catalyst) catalyst[2]),
seq.text = catalyst.fasta$seq.text
)
electron.data <- data.frame(
Entry = sapply(electron, function(electron) electron[2]),
seq.text = electron.fasta$seq.text
)
regulator.data <- data.frame(
Entry = sapply(regulator, function(regulator) regulator[2]),
seq.text = regulator.fasta$seq.text
)
structural.data <- data.frame(
Entry = sapply(structural, function(structural) structural[2]),
seq.text = structural.fasta$seq.text
)
transporter.data <- data.frame(
Entry = sapply(transporter, function(transporter) transporter[2]),
seq.text = transporter.fasta$seq.text
)
names.data <- c(binding.data, catalyst.data, electron.data, regulator.data, structural.data, transporter.data)
summary(names.data)
#merge all fasta dataframes
merged <- rbind(binding.data, catalyst.data)
merged <- rbind(merged, electron.data)
merged <- rbind(merged, regulator.data)
merged <- rbind(merged, transporter.data)
merged <- rbind(merged, structural.data)
# Perform left join using dplyr
filtered.df <- left_join(df, merged, by = 'Entry')
#check files merged correctly
summary(filtered.df)
# Save filtered fasta
write.fasta(as.list(filtered.df$seq.text), filtered.df$Entry, "Output/filtered.fasta", as.string = FALSE)
# Load final fasta
filtered.fasta <- readFASTA("Output/filtered.fasta")
filtered.fasta[1:5]
#remove any sequences with non standard amino acids
filtered.fasta <- filtered.fasta[(sapply(filtered.fasta, protcheck))]
# Calculate APseAAC descriptors
composition <- t(sapply(filtered.fasta, function(seq) extractAPAAC(seq, lambda = 1)))
knitr::opts_chunk$set(echo = TRUE)
#list all packages used
packages = c("tidyr", "readr", "phylotools", "dplyr", "ggplot2", "Biostrings", "protr", "stringr", "randomForest", "tree", "ggrepel", "tidyverse", "e1071", "neuralnet", "shiny", "bslib", "dplyr", "ggplot2", "ggExtra", "seqinr", "caret")
## oad or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
#load data (dataframes)
catalyst.df <- read_tsv("Data/GO0003824.tsv")
binding.df <- read_tsv("Data/GO0005488.tsv")
electron.df <- read_tsv("Data/GO0009055.tsv")
regulator.df <- read_tsv("Data/GO0098772.tsv")
transporter.df <- read_tsv("Data/GO0005215.tsv")
structural.df <- read_tsv("Data/GO0005198.tsv")
# Load FASTA files using phylotools package
catalyst.fasta <- phylotools::read.fasta("Data/GO0003824.fasta")
binding.fasta <-  phylotools::read.fasta("Data/GO0005488.fasta")
electron.fasta <-  phylotools::read.fasta("Data/GO0009055.fasta")
regulator.fasta <-  phylotools::read.fasta("Data/GO0098772.fasta")
transporter.fasta <- phylotools::read.fasta("Data/GO0005215.fasta")
structural.fasta <- phylotools::read.fasta("Data/GO0005198.fasta")
#inspect loaded data data
summary(c(binding.df,catalyst.df, electron.df,regulator.df,transporter.df,structural.df))
#Add a column for GOID and GO descriptor to each df
binding.df$GO <- "Binding"
catalyst.df$GO <- "Catalytic activity"
electron.df$GO <- "Electron Transfer"
regulator.df$GO <- "Molecular Function Regulator"
transporter.df$GO <- "Transporter Activity"
structural.df$GO <- "Structural Molecule"
#filter out duplicates in the databases
catalyst.filtered <- catalyst.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
binding.filtered <-binding.df %>%
filter(!Entry %in% catalyst.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
electron.filtered <- electron.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
regulator.filtered <- regulator.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
structural.filtered <- structural.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% catalyst.df$Entry)
transporter.filtered <- transporter.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% structural.df$Entry)
#combine all databases
df <- rbind(catalyst.filtered,binding.filtered,electron.filtered,regulator.filtered,structural.filtered,transporter.filtered)
#modify colnames for ease
colnames(df) <- c("Entry", "Organism.ID", "Organism", "Length", "Molecular_function", "GO" )
#check for missing values
sapply(df, function(x) sum(is.na(x)))
# inspect modified data
summary(df)
#intermediate file saved
write_tsv(df, "Output/output_file1.tsv")
#load saved file
df <- read_tsv("Output/output_file1.tsv")
names.fasta <- c(catalyst.fasta, binding.fasta, electron.fasta, regulator.fasta,transporter.fasta,structural.fasta)
summary(names.fasta)
# Isolate Entry ID from rownames
catalyst <- strsplit(as.character(catalyst.fasta$seq.name), "|", fixed = T)
binding <- strsplit(as.character(binding.fasta$seq.name), "|", fixed = T)
electron <- strsplit(as.character(electron.fasta$seq.name), "|", fixed = T)
regulator <- strsplit(as.character(regulator.fasta$seq.name), "|", fixed = T)
structural <- strsplit(as.character(structural.fasta$seq.name), "|", fixed = T)
transporter <- strsplit(as.character(transporter.fasta$seq.name), "|", fixed = T)
names <- c(catalyst,binding,electron, regulator, structural,transporter)
head(names)
# Create a data frame with Entry ID as a column
binding.data <- data.frame(
Entry = sapply(binding, function(binding) binding[2]),
seq.text = binding.fasta$seq.text
)
catalyst.data <- data.frame(
Entry = sapply(catalyst, function(catalyst) catalyst[2]),
seq.text = catalyst.fasta$seq.text
)
electron.data <- data.frame(
Entry = sapply(electron, function(electron) electron[2]),
seq.text = electron.fasta$seq.text
)
regulator.data <- data.frame(
Entry = sapply(regulator, function(regulator) regulator[2]),
seq.text = regulator.fasta$seq.text
)
structural.data <- data.frame(
Entry = sapply(structural, function(structural) structural[2]),
seq.text = structural.fasta$seq.text
)
transporter.data <- data.frame(
Entry = sapply(transporter, function(transporter) transporter[2]),
seq.text = transporter.fasta$seq.text
)
names.data <- c(binding.data, catalyst.data, electron.data, regulator.data, structural.data, transporter.data)
summary(names.data)
#merge all fasta dataframes
merged <- rbind(binding.data, catalyst.data)
merged <- rbind(merged, electron.data)
merged <- rbind(merged, regulator.data)
merged <- rbind(merged, transporter.data)
merged <- rbind(merged, structural.data)
# Perform left join using dplyr
filtered.df <- left_join(df, merged, by = 'Entry')
#check files merged correctly
summary(filtered.df)
# Save filtered fasta
write.fasta(as.list(filtered.df$seq.text), filtered.df$Entry, "Output/filtered.fasta", as.string = FALSE)
# Load final fasta
filtered.fasta <- readFASTA("Output/filtered.fasta")
filtered.fasta[1:5]
#remove any sequences with non standard amino acids
filtered.fasta <- filtered.fasta[(sapply(filtered.fasta, protcheck))]
# Calculate APseAAC descriptors
composition <- t(sapply(filtered.fasta, function(seq) extractAPAAC(seq, lambda = 1)))
#change composition to a dataframe
composition <- data.frame(composition)
#include Entry as a column
composition <- tibble::rownames_to_column(composition, "Entry")
head(composition)
# Save AA composition
write_tsv(composition, "Output/Composition.tsv")
#load dataframe
composition <- read_tsv("Output/Composition.tsv")
#check file imported correctly
colnames(composition)
# Merge base dataframe with FASTA data by Entry
df <- left_join(df, composition, by = 'Entry')
colnames(df)
# Remove columns not used in classification
df <- subset(df, select = -c(Entry, Organism.ID, Organism, Molecular_function))
summary(df)
# Save final merged data file
write_tsv(df, "Output/final_df.tsv")
df <- read_tsv("Output/final_df.tsv")
#change oGO to factor for clasification
df$GO <- as.factor(df$GO)
#check for NAs n the final dataset
sapply(df, function(x) sum(is.na(x)))
#remove NAs
df<- drop_na(df)
#check Nas have been handles
sapply(df, function(x) sum(is.na(x)))
#Plot a tree to see the variables which largerly contribute to clasification
tree <- tree(GO ~ ., df)
plot(tree, type="uniform")
text(tree)
#select random sample of 1000 rows from data frame
set.seed(123)
df.sample <- df[sample(nrow(df), size=10000), ]
# Define the training control and train the Random Forest model
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
rfModel <- train(GO ~ ., data = df.sample, method = "rf", trControl = trainControl)
confusion.plot
knitr::opts_chunk$set(echo = TRUE)
#list all packages used
packages = c("tidyr", "readr", "phylotools", "dplyr", "ggplot2", "Biostrings", "protr", "stringr", "randomForest", "tree", "ggrepel", "tidyverse", "e1071", "neuralnet", "shiny", "bslib", "dplyr", "ggplot2", "ggExtra", "seqinr", "caret")
## oad or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
#load data (dataframes)
catalyst.df <- read_tsv("Data/GO0003824.tsv")
binding.df <- read_tsv("Data/GO0005488.tsv")
electron.df <- read_tsv("Data/GO0009055.tsv")
regulator.df <- read_tsv("Data/GO0098772.tsv")
transporter.df <- read_tsv("Data/GO0005215.tsv")
structural.df <- read_tsv("Data/GO0005198.tsv")
# Load FASTA files using phylotools package
catalyst.fasta <- phylotools::read.fasta("Data/GO0003824.fasta")
binding.fasta <-  phylotools::read.fasta("Data/GO0005488.fasta")
electron.fasta <-  phylotools::read.fasta("Data/GO0009055.fasta")
regulator.fasta <-  phylotools::read.fasta("Data/GO0098772.fasta")
transporter.fasta <- phylotools::read.fasta("Data/GO0005215.fasta")
structural.fasta <- phylotools::read.fasta("Data/GO0005198.fasta")
#inspect loaded data data
summary(c(binding.df,catalyst.df, electron.df,regulator.df,transporter.df,structural.df))
#Add a column for GOID and GO descriptor to each df
binding.df$GO <- "Binding"
catalyst.df$GO <- "Catalytic activity"
electron.df$GO <- "Electron Transfer"
regulator.df$GO <- "Molecular Function Regulator"
transporter.df$GO <- "Transporter Activity"
structural.df$GO <- "Structural Molecule"
#filter out duplicates in the databases
catalyst.filtered <- catalyst.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
binding.filtered <-binding.df %>%
filter(!Entry %in% catalyst.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
electron.filtered <- electron.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
regulator.filtered <- regulator.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% structural.df$Entry)
structural.filtered <- structural.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% transporter.df$Entry & !Entry %in% catalyst.df$Entry)
transporter.filtered <- transporter.df %>%
filter(!Entry %in% binding.df$Entry & !Entry %in% electron.df$Entry & !Entry %in% regulator.df$Entry & !Entry %in% catalyst.df$Entry & !Entry %in% structural.df$Entry)
#combine all databases
df <- rbind(catalyst.filtered,binding.filtered,electron.filtered,regulator.filtered,structural.filtered,transporter.filtered)
#modify colnames for ease
colnames(df) <- c("Entry", "Organism.ID", "Organism", "Length", "Molecular_function", "GO" )
#check for missing values
sapply(df, function(x) sum(is.na(x)))
# inspect modified data
summary(df)
#intermediate file saved
write_tsv(df, "Output/output_file1.tsv")
#load saved file
df <- read_tsv("Output/output_file1.tsv")
names.fasta <- c(catalyst.fasta, binding.fasta, electron.fasta, regulator.fasta,transporter.fasta,structural.fasta)
summary(names.fasta)
# Isolate Entry ID from rownames
catalyst <- strsplit(as.character(catalyst.fasta$seq.name), "|", fixed = T)
binding <- strsplit(as.character(binding.fasta$seq.name), "|", fixed = T)
electron <- strsplit(as.character(electron.fasta$seq.name), "|", fixed = T)
regulator <- strsplit(as.character(regulator.fasta$seq.name), "|", fixed = T)
structural <- strsplit(as.character(structural.fasta$seq.name), "|", fixed = T)
transporter <- strsplit(as.character(transporter.fasta$seq.name), "|", fixed = T)
names <- c(catalyst,binding,electron, regulator, structural,transporter)
head(names)
# Create a data frame with Entry ID as a column
binding.data <- data.frame(
Entry = sapply(binding, function(binding) binding[2]),
seq.text = binding.fasta$seq.text
)
catalyst.data <- data.frame(
Entry = sapply(catalyst, function(catalyst) catalyst[2]),
seq.text = catalyst.fasta$seq.text
)
electron.data <- data.frame(
Entry = sapply(electron, function(electron) electron[2]),
seq.text = electron.fasta$seq.text
)
regulator.data <- data.frame(
Entry = sapply(regulator, function(regulator) regulator[2]),
seq.text = regulator.fasta$seq.text
)
structural.data <- data.frame(
Entry = sapply(structural, function(structural) structural[2]),
seq.text = structural.fasta$seq.text
)
transporter.data <- data.frame(
Entry = sapply(transporter, function(transporter) transporter[2]),
seq.text = transporter.fasta$seq.text
)
names.data <- c(binding.data, catalyst.data, electron.data, regulator.data, structural.data, transporter.data)
summary(names.data)
#merge all fasta dataframes
merged <- rbind(binding.data, catalyst.data)
merged <- rbind(merged, electron.data)
merged <- rbind(merged, regulator.data)
merged <- rbind(merged, transporter.data)
merged <- rbind(merged, structural.data)
# Perform left join using dplyr
filtered.df <- left_join(df, merged, by = 'Entry')
#check files merged correctly
summary(filtered.df)
# Save filtered fasta
write.fasta(as.list(filtered.df$seq.text), filtered.df$Entry, "Output/filtered.fasta", as.string = FALSE)
# Load final fasta
filtered.fasta <- readFASTA("Output/filtered.fasta")
filtered.fasta[1:5]
#remove any sequences with non standard amino acids
filtered.fasta <- filtered.fasta[(sapply(filtered.fasta, protcheck))]
# Calculate APseAAC descriptors
composition <- t(sapply(filtered.fasta, function(seq) extractAPAAC(seq, lambda = 1)))
#change composition to a dataframe
composition <- data.frame(composition)
#include Entry as a column
composition <- tibble::rownames_to_column(composition, "Entry")
head(composition)
# Save AA composition
write_tsv(composition, "Output/Composition.tsv")
#load dataframe
composition <- read_tsv("Output/Composition.tsv")
#check file imported correctly
colnames(composition)
# Merge base dataframe with FASTA data by Entry
df <- left_join(df, composition, by = 'Entry')
colnames(df)
# Remove columns not used in classification
df <- subset(df, select = -c(Entry, Organism.ID, Organism, Molecular_function))
summary(df)
# Save final merged data file
write_tsv(df, "Output/final_df.tsv")
df <- read_tsv("Output/final_df.tsv")
#change oGO to factor for clasification
df$GO <- as.factor(df$GO)
#check for NAs n the final dataset
sapply(df, function(x) sum(is.na(x)))
#remove NAs
df<- drop_na(df)
#check Nas have been handles
sapply(df, function(x) sum(is.na(x)))
#Plot a tree to see the variables which largerly contribute to clasification
tree <- tree(GO ~ ., df)
plot(tree, type="uniform")
text(tree)
#select random sample of 1000 rows from data frame
set.seed(123)
df.sample <- df[sample(nrow(df), size=10000), ]
# Define the training control and train the Random Forest model
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
rfModel <- train(GO ~ ., data = df.sample, method = "rf", trControl = trainControl)
